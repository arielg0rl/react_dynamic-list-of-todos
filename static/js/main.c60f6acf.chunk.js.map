{"version":3,"sources":["components/TodoList/TodoList.tsx","components/api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","title","sortBy","handleInputChange","event","value","target","setState","toLowerCase","handleSelectorChange","getSortedTodos","todos","filter","todo","completed","getSearchedTodos","includes","this","props","onChecked","selectedUserId","todosByStatus","className","type","name","onChange","placeholder","map","classNames","TodoList__item__unchecked","TodoList__item__checked","readOnly","TodoList__user_button__selected","userId","onClick","id","React","Component","API_URL","getTodos","a","fetch","then","result","json","getUser","CurrentUser","user","username","email","phone","website","userError","loadUsers","prevProps","onClear","App","getsChecked","unselectAll","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c60f6acf.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  onChecked: (userId: number) => void,\n  selectedUserId: number,\n};\n\ntype State = {\n  title: string,\n  sortBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    title: '',\n    sortBy: 'all',\n  };\n\n  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({ title: value.toLowerCase() });\n  };\n\n  handleSelectorChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({ sortBy: value });\n  };\n\n  getSortedTodos = (todos: Todo[]) => {\n    const { sortBy } = this.state;\n\n    if (sortBy !== 'all') {\n      switch (sortBy) {\n        case 'active':\n          return todos.filter(todo => todo.completed === false);\n        default:\n          return todos.filter(todo => todo.completed === true);\n      }\n    }\n\n    return todos;\n  };\n\n  getSearchedTodos = (todos: Todo[]) => {\n    const { title } = this.state;\n\n    if (title) {\n      return todos.filter(todo => todo.title.toLowerCase().includes(title));\n    }\n\n    return todos;\n  };\n\n  render() {\n    const { onChecked, selectedUserId } = this.props;\n    const todosByStatus = this.getSortedTodos(this.props.todos);\n    const todos = this.getSearchedTodos(todosByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          type=\"text\"\n          name=\"title\"\n          value={this.state.title}\n          onChange={this.handleInputChange}\n          placeholder=\"enter title\"\n        />\n        <select\n          name=\"sortBy\"\n          value={this.state.sortBy}\n          onChange={this.handleSelectorChange}\n        >\n          <option value=\"all\">\n            choose all\n          </option>\n          <option value=\"complited\">\n            completed\n          </option>\n          <option value=\"active\">\n            not complited\n          </option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', { TodoList__item__unchecked: todo.completed === false }, { TodoList__item__checked: todo.completed === true })}\n              >\n                { /*eslint-disable*/\n                  <label>\n                    <input type=\"checkbox\" readOnly />\n                    <p>{todo.title}</p>\n                  </label>\n                }\n                <button\n                  className={classNames('TodoList__user-button',\n                    'button',\n                    { TodoList__user_button__selected: todo.userId === selectedUserId })}\n                  type=\"button\"\n                  onClick={() => onChecked(todo.userId)}\n                >\n                  User\n                  {' '}\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n","export const API_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  return fetch(`${API_URL}/todos`)\n    .then(result => result.json());\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  return fetch(`${API_URL}/users/${userId}`)\n    .then(result => result.json());\n};\n","import React from 'react';\nimport { getUser } from '../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onClear: () => void,\n};\n\ntype State = {\n  user: User,\n  userError: boolean,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: {\n      id: 0,\n      name: '',\n      username: '',\n      email: '',\n      phone: '',\n      website: '',\n    },\n    userError: false,\n  };\n\n  async componentDidMount() {\n    this.loadUsers();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (this.props.userId !== prevProps.userId) {\n      this.loadUsers();\n    }\n  }\n\n  loadUsers = async () => {\n    try {\n      const user = await getUser(this.props.userId);\n\n      this.setState({ user, userError: false });\n    } catch {\n      this.setState({ userError: true });\n    }\n  };\n\n  render() {\n    return (\n      !this.state.userError ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {' '}\n              {this.state.user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{this.state.user.name}</h3>\n          <p className=\"CurrentUser__email\">{this.state.user.email}</p>\n          <p className=\"CurrentUser__phone\">{this.state.user.phone}</p>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={() => {\n              this.props.onClear();\n            }}\n          >\n            clear\n          </button>\n        </div>\n      ) : (\n        `User with id #${this.props.userId} doesn't exist`\n      )\n    );\n  }\n}\n// `User with id #${this.props.userId} doesn't exist`\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  getsChecked = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  unselectAll = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={this.state.todos}\n            onChecked={this.getsChecked}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                onClear={this.unselectAll}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}